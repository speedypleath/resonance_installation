graphs:
  # The publish/subscribe broker graph
  - id: PubSubBroker
    nodes:
    # Allow communication between graphs
    - id: Broker
      module: timeflux.nodes.zmq
      class: Broker

  # The main processing graph
  - id: Processing
    nodes:
    # Receive EEG signal from the network
    - id: LSL
      module: timeflux.nodes.lsl
      class: Receive
      params:
        value: Muse
        channels: [ TP9, AF7, AF8, TP10, Right AUX]
        dejitter: true
        monotonize: true
        clocksync: true
    - id: Display
      module: timeflux.nodes.debug
      class: Display
    # Continuously buffer the signal
    - id: Rolling
      module: timeflux.nodes.window
      class: Window
      params:
        length: 1.5
        step: 0.5
    # Compute the power spectral density
    - id: Welch
      module: timeflux_dsp.nodes.spectral
      class: Welch
    # Average the power over band frequencies
    - id: Bands
      module: timeflux_dsp.nodes.spectral
      class: Bands
    # Send to an external application
    - id: OSC
      module: timeflux.nodes.osc
      class: Client
      params:
        address: /alpha
        port: 4560
    - id: OSCBeta
      module: timeflux.nodes.osc
      class: Client
      params:
        address: /beta
        port: 4560
    # Publish the raw EEG signal
    - id: PublisherRaw
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: raw
    # Publish the frequency bands
    - id: PublisherBands
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: bands
    - id: Random
      module: timeflux.nodes.random
      class: Random
      params:
        columns: 2
        seed: 1
    - id: PubRandom
      module: timeflux.nodes.zmq
      class: Pub
      params:
        topic: random
    # Connect nodes
    edges:
      - source: LSL
        target: Rolling
      - source: Rolling
        target: Welch
      - source: Welch
        target: Bands
      - source: Bands:alpha
        target: OSC
      - source: Bands:beta
        target: OSCBeta
      - source: LSL
        target: PublisherRaw
      - source: Bands:alpha
        target: PublisherBands
      - source: Random
        target: PubRandom
      - source: Bands:alpha
        target: Display
    # Run this graph 25 times per second
    rate: 25

  - id: Subscriber
    nodes:
    - id: sub
      module: timeflux.nodes.zmq
      class: Sub
      params:
        topics: [ raw, random, bands ]
    - id: monitor
      module: timeflux_ui.nodes.ui
      class: UI
    edges:
      - source: sub:bands
        target: monitor:bands
      - source: sub:raw
        target: monitor:raw
      - source: sub:random
        target: monitor:random